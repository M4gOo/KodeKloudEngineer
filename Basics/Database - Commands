- The command in mysql don't need to be in capital, but it is a good practice.
- It's a good practice to always use single quotes (some SQL flavor will give an error for using doublew quotes) to wrap around whatever text we're providing 
  when we're inserting or working with data. 
- (in case you have a name like Italiano's pizza, use a backslash to escape that quote)
  INSERT INTO shops(name) VALUES ('Italiano\'s pizza');
- to prevent any unexpected updates, select whatever you're trying to update before you actually perform the update.
- to upload a file into mysql, open mysql in the terminal, choose or create a DB and then use the command source (source tables_file.sql) 



####### accessing MySQL

mysql -u root -p


######### make comments use

-- this is a comment 


#####To show all databases in the server mysql 

show databases;


####The general command for creating a database

CREATE DATABASE <database_name>;


########To drop a database. This will remove the database and also the content

DROP DATABASE <database-name>;


#########To use a database:

USE <database-name>;


###this check which database you are
SELECT database(); 


###### create a table
CREATE TABLE tablename
  (
      column_name data_type,
      column_name data_type
  );

CREATE TABLE dogs
  (
      name VARCHAR(100),
      age INT
  );


########### look at the tables inside the database

SHOW TABLES;


############  show the columns inside a table

SHOW COLUMNS FROM <tablename>;

OR

DESC <tablename>;


########### To drop a table. This will remove the table and also the content

DROP TABLE <table-name>;


######### add statements into the table. THE ORDER MATTERS!!!

INSERT INTO <table-name> (name, age)    -> between () we specify the columns and what order it will be expected
VALUES ('Jetson', 7);

OR

INSERT INTO <table-name> (name, age) VALUES ('Jetson', 7);            OR       INSERT INTO <table-name> (age, name) VALUES (7, 'Jetson');

----- Multiple values

 INSERT INTO <table-name> (age, name) VALUES (7, 'Jetson'), (5, 'Josh');

----- When NULL is YES

INSERT INTO <table-name> (name) VALUES ('Jetson');


####### to check the data inside a table 

SELECT * FROM <table-name>;

* - means gives everything from the <table-name>

SELECT Username FROM <table-name>;

SELECT Username, UserAddress FROM <table-name>;

############## example of a table with null, key and default values

+-------------+-------------+------+-----+---------+----------------+
| Field       | Type        | Null | Key | Default | Extra          |
+-------------+-------------+------+-----+---------+----------------+
| Id          | int(11)     | NO   | PRI | NULL    | auto_increment |
| UserName    | varchar(20) | YES  |     | NULL    |                |
| UserAddress | varchar(20) | YES  |     |         |                |
+-------------+-------------+------+-----+---------+----------------+

PRI - means primary

###### NOT  NULL, even if you try to insert into it will give you an error

CREATE TABLE dogs
  (
      name VARCHAR(100) NOT NULL,
      age INT NOT NULL
  );


##### adding a DEFAULT value into the table

CREATE TABLE dogs  
  (    
    name VARCHAR(20) DEFAULT 'no name provided',    
    age INT DEFAULT 99  
);


##### combine NOT NULL and DEFAULT    -> need specify the NOT NULL, because it is possible to manually add NULL like INSERT INTO dogs (name, age) VALUES (NULL, 5);

Combine NOT NULL and DEFAULT:

CREATE TABLE dogs  (    
    name VARCHAR(20) NOT NULL DEFAULT 'unnamed',    
    age INT NOT NULL DEFAULT 99 
);


######## KEY VALUE into the table    -> primary keys cannot be null, once actived you need specify a value or have a auto_increment

We add unique IDs to rows so that we can differentiate them even when all the other data looks the same.
So this is something we'll do for almost every single table you ever make is add some form of a unique identifier.

very simple just add a numeric ID that starts at one and then goes to two, three and four.
we're going to declare our column, the ID column, the primary key (unique identifier) for this table.


CREATE TABLE unique_dogs (
	dog_id INT PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    age INT NOT NULL,
   );


            OR


CREATE TABLE unique_cats2 (
	cat_id INT,
    name VARCHAR(100) NOT NULL,
    age INT NOT NULL,
    PRIMARY KEY (cat_id)
);


INSERT INTO unique_dogs (dog_id, name, age) VALUES (1, 'Spike', 7);

------------ auto increment on your primary key fields. It will show in EXTRAS colummns on tables
We'll have one and then two and then three and then four and we don't have to go and add anything.
We don't have to manually insert and keep track of the unique IDs.


CREATE TABLE unique_cats3 (
    cat_id INT AUTO_INCREMENT,
    name VARCHAR(100) NOT NULL,
    age INT NOT NULL,
    PRIMARY KEY (cat_id)
);



####### using WHERE as a condition

+--------+----------------+------------+------+
| cat_id | name           | breed      | age  |
+--------+----------------+------------+------+
|      1 | Ringo          | Tabby      |    4 |
|      2 | Cindy          | Maine Coon |   10 |
|      3 | Dumbledore     | Maine Coon |   11 |
|      4 | Egg            | Persian    |    4 |
|      5 | Misty          | Tabby      |   13 |
|      6 | George Michael | Ragdoll    |    9 |
|      7 | Jackson        | Sphynx     |    7 |
+--------+----------------+------------+------+

SELECT * FROM cats WHERE age = 4;

SELECT * FROM cats WHERE name ='Egg';    (name is case insensitive, so you can use 'egg'. 'eGg', ...)

SELECT cat_id, age FROM cats WHERE cat_id=age;


############ Aliases  ---------- AS

we can rename a column to make it shorter or easier to understand.
it's not the same as renaming the column forever. It's just in our output result.

SELECT cat_id AS id, name FROM cats;

+----+----------------+
| id | name           |
+----+----------------+
|  1 | Ringo          |
|  2 | Cindy          |
|  3 | Dumbledore     |
|  4 | Egg            |
|  5 | Misty          |
|  6 | George Michael |
|  7 | Jackson        |
+----+----------------+


When we get into fancier things like joining data together or writing fancy select queries that are
really complicated, we might have some resulting data that doesn't really have a name.
We use the as keyword to give it a meaningful name.


################## Update a table ---------- UPDATE  SET

to prevent any unexpected updates, select whatever you're trying to update before you actually perform the update.

UPDATE cats SET breed='Shorthair' WHERE breed='Tabby';

UPDATE cats SET age=14 WHERE name='Misty';

UPDATE cats SET age=12 WHERE breed='Maine Coon';

UPDATE cats SET breed='British Shorthair' WHERE  name='Ringo';


############ Delete rows  --------------  DELETE FROM 

-- Delete all cats with name of 'Egg':
DELETE FROM cats WHERE name='Egg';

-- Delete all rows in the cats table:
DELETE FROM cats;

-- Delete all 4 year old cats:
DELETE FROM cats WHERE age=4;

-- Delete cats where cat_id is the same as their age:
DELETE FROM cats WHERE cat_id=age;


#################### CONCAT   and CONCAT_WS

concatenating different pieces of text together from a table from different rows.

CONCAT_WS
width separator.
We provide a separator and whatever that separator character is will be smushed between every other value.

SELECT CONCAT('pi', 'ckle');
 
SELECT CONCAT(author_fname,' ', author_lname) AS author_name FROM books;
author_name
Author Lastname
 
SELECT CONCAT_WS('-',title, author_fname, author_lname) FROM books;
Author-Lastname


#####################   SUBSTRING

SELECT SUBSTRING('Hello World', 1, 4);
+--------------------------------+
| SUBSTRING('Hello World', 1, 4) |
+--------------------------------+
| Hell                           |
+--------------------------------+


#################   Combining String Functions

SELECT CONCAT
         (
             SUBSTRING(title, 1, 10),
             '...'
         ) AS 'short title'
     FROM books;
+---------------+
| short title   |
+---------------+
| The Namesa... |
| Norse Myth... |
| American G... |
| Interprete... |
| A Hologram... |
| The Circle... |
| The Amazin... |
| Just Kids...  |
| A Heartbre... |
| Coraline...   |
| What We Ta... |
| Where I'm ... |
| White Nois... |
| Cannery Ro... |
| Oblivion: ... |
| Consider t... |
+---------------+

 
SELECT SUBSTRING('Hello World', 7);
+-----------------------------+
| SUBSTRING('Hello World', 7) |
+-----------------------------+
| World                       |
+-----------------------------+
 
SELECT SUBSTRING('Hello World', -3);
+------------------------------+
| SUBSTRING('Hello World', -3) |
+------------------------------+
| rld                          |
+------------------------------+
 
SELECT SUBSTRING(title, 1, 10) AS 'short title' FROM books;      OR     SELECT SUBSTR(title, 1, 10) AS 'short title' FROM books;
 +-------------+
| short title |
+-------------+
| The Namesa  |
| Norse Myth  |
| American G  |
| Interprete  |
| A Hologram  |
| The Circle  |
| The Amazin  |
| Just Kids   |
| A Heartbre  |
| Coraline    |
| What We Ta  |
| Where I'm   |
| White Nois  |
| Cannery Ro  |
| Oblivion:   |
| Consider t  |
+-------------+


#######################  REPLACE   
replace allows us to replace portions of a string with some other replacement string. But the table will remain the same just the output will have the replaces.

REPLACE(string, from_string, new_string)

SELECT REPLACE('cheese bread coffee milk', ' ', ' and ');
+---------------------------------------------------+
| REPLACE('cheese bread coffee milk', ' ', ' and ') |
+---------------------------------------------------+
| cheese and bread and coffee and milk              |
+---------------------------------------------------+

SELECT REPLACE(title, 'e ', '3') FROM books;
 +---------------------------------------------------+
| REPLACE(title, 'e ', '3')                         |
+---------------------------------------------------+
| Th3Namesake                                       |
| Nors3Mythology                                    |
| American Gods                                     |
| Interpreter of Maladies                           |
| A Hologram for th3King: A Novel                   |
| Th3Circle                                         |
| Th3Amazing Adventures of Kavalier & Clay          |
| Just Kids                                         |
| A Heartbreaking Work of Staggering Genius         |
| Coraline                                          |
| What W3Talk About When W3Talk About Love: Stories |
| Wher3I'm Calling From: Selected Stories           |
| Whit3Noise                                        |
| Cannery Row                                       |
| Oblivion: Stories                                 |
| Consider th3Lobster                               |
+---------------------------------------------------+

SELECT REPLACE(title, ' ', '-') FROM books;
+-----------------------------------------------------+
| REPLACE(title, ' ', '-')                            |
+-----------------------------------------------------+
| The-Namesake                                        |
| Norse-Mythology                                     |
| American-Gods                                       |
| Interpreter-of-Maladies                             |
| A-Hologram-for-the-King:-A-Novel                    |
| The-Circle                                          |
| The-Amazing-Adventures-of-Kavalier-&-Clay           |
| Just-Kids                                           |
| A-Heartbreaking-Work-of-Staggering-Genius           |
| Coraline                                            |
| What-We-Talk-About-When-We-Talk-About-Love:-Stories |
| Where-I'm-Calling-From:-Selected-Stories            |
| White-Noise                                         |
| Cannery-Row                                         |
| Oblivion:-Stories                                   |
| Consider-the-Lobster                                |
+-----------------------------------------------------+
